# src/cloud_pipeline.py

import functions_framework
import pandas as pd
import sqlalchemy
import requests
from weather_api import fetch_weather_data  # your function from weather_api.py
from flights_api import fetch_flight_data   # your function from flights_api.py

# Main function for Google Cloud Function
@functions_framework.http
def retrieve_send_data(request):
    connection_string = get_connection()
    cities = fetch_cities(connection_string)
    iatas = fetch_iata(connection_string)
    
    # Call your API scripts
    weather_df = fetch_weather_data(cities)
    departures_df, arrivals_df = fetch_flight_data(iatas)
    
    # Upload data to Cloud SQL
    data_to_sql(weather_df, departures_df, arrivals_df, connection_string)
    
    return "Cloud pipeline executed successfully!"

# Cloud SQL connection
def get_connection():
    schema = "cities_cloud"
    host = "YOUR_CLOUD_SQL_HOST"
    user = "root"
    password = "YOUR_PASSWORD"
    port = 3306
    return f"mysql+pymysql://{user}:{password}@{host}:{port}/{schema}"

# Fetch cities from DB
def fetch_cities(connection_string):
    city_df = pd.read_sql('SELECT * FROM city_df', con=connection_string)
    coordinates_df = pd.read_sql('SELECT * FROM coordinates_df', con=connection_string)
    return pd.merge(city_df, coordinates_df, on="city_id")

# Fetch airport IATA codes from DB
def fetch_iata(connection_string):
    return pd.read_sql('SELECT * FROM airports', con=connection_string)

# Upload data to Cloud SQL
def data_to_sql(weather_df, departures_df, arrivals_df, connection_string):
    weather_df.to_sql("weather_df", con=connection_string, if_exists='append', index=False)
    departures_df.to_sql("flight_departures", con=connection_string, if_exists='append', index=False)
    arrivals_df.to_sql("flight_arrivals", con=connection_string, if_exists='append', index=False)
